<?php
/**
 * BaseFlight
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresightâ„¢, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresightâ„¢ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FlightAware\PHPClient\Model;

use \ArrayAccess;
use \FlightAware\PHPClient\ObjectSerializer;

/**
 * BaseFlight Class Doc Comment
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseFlight implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseFlight';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ident' => 'string',
'ident_icao' => 'string',
'ident_iata' => 'string',
'fa_flight_id' => 'string',
'operator' => 'string',
'operator_icao' => 'string',
'operator_iata' => 'string',
'flight_number' => 'string',
'registration' => 'string',
'atc_ident' => 'string',
'inbound_fa_flight_id' => 'string',
'codeshares' => 'string[]',
'codeshares_iata' => 'string[]',
'blocked' => 'bool',
'diverted' => 'bool',
'cancelled' => 'bool',
'position_only' => 'bool',
'origin' => '\FlightAware\PHPClient\Model\FlightAirportRef',
'destination' => '\FlightAware\PHPClient\Model\FlightAirportRef1',
'departure_delay' => 'int',
'arrival_delay' => 'int',
'filed_ete' => 'int',
'progress_percent' => 'int',
'status' => 'string',
'aircraft_type' => 'string',
'route_distance' => 'int',
'filed_airspeed' => 'int',
'filed_altitude' => 'int',
'route' => 'string',
'baggage_claim' => 'string',
'seats_cabin_business' => 'int',
'seats_cabin_coach' => 'int',
'seats_cabin_first' => 'int',
'gate_origin' => 'string',
'gate_destination' => 'string',
'terminal_origin' => 'string',
'terminal_destination' => 'string',
'type' => 'string',
'scheduled_out' => '\DateTime',
'estimated_out' => '\DateTime',
'actual_out' => '\DateTime',
'scheduled_off' => '\DateTime',
'estimated_off' => '\DateTime',
'actual_off' => '\DateTime',
'scheduled_on' => '\DateTime',
'estimated_on' => '\DateTime',
'actual_on' => '\DateTime',
'scheduled_in' => '\DateTime',
'estimated_in' => '\DateTime',
'actual_in' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ident' => null,
'ident_icao' => null,
'ident_iata' => null,
'fa_flight_id' => null,
'operator' => null,
'operator_icao' => null,
'operator_iata' => null,
'flight_number' => null,
'registration' => null,
'atc_ident' => null,
'inbound_fa_flight_id' => null,
'codeshares' => null,
'codeshares_iata' => null,
'blocked' => null,
'diverted' => null,
'cancelled' => null,
'position_only' => null,
'origin' => null,
'destination' => null,
'departure_delay' => null,
'arrival_delay' => null,
'filed_ete' => null,
'progress_percent' => null,
'status' => null,
'aircraft_type' => null,
'route_distance' => null,
'filed_airspeed' => null,
'filed_altitude' => null,
'route' => null,
'baggage_claim' => null,
'seats_cabin_business' => null,
'seats_cabin_coach' => null,
'seats_cabin_first' => null,
'gate_origin' => null,
'gate_destination' => null,
'terminal_origin' => null,
'terminal_destination' => null,
'type' => null,
'scheduled_out' => 'date-time',
'estimated_out' => 'date-time',
'actual_out' => 'date-time',
'scheduled_off' => 'date-time',
'estimated_off' => 'date-time',
'actual_off' => 'date-time',
'scheduled_on' => 'date-time',
'estimated_on' => 'date-time',
'actual_on' => 'date-time',
'scheduled_in' => 'date-time',
'estimated_in' => 'date-time',
'actual_in' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ident' => 'ident',
'ident_icao' => 'ident_icao',
'ident_iata' => 'ident_iata',
'fa_flight_id' => 'fa_flight_id',
'operator' => 'operator',
'operator_icao' => 'operator_icao',
'operator_iata' => 'operator_iata',
'flight_number' => 'flight_number',
'registration' => 'registration',
'atc_ident' => 'atc_ident',
'inbound_fa_flight_id' => 'inbound_fa_flight_id',
'codeshares' => 'codeshares',
'codeshares_iata' => 'codeshares_iata',
'blocked' => 'blocked',
'diverted' => 'diverted',
'cancelled' => 'cancelled',
'position_only' => 'position_only',
'origin' => 'origin',
'destination' => 'destination',
'departure_delay' => 'departure_delay',
'arrival_delay' => 'arrival_delay',
'filed_ete' => 'filed_ete',
'progress_percent' => 'progress_percent',
'status' => 'status',
'aircraft_type' => 'aircraft_type',
'route_distance' => 'route_distance',
'filed_airspeed' => 'filed_airspeed',
'filed_altitude' => 'filed_altitude',
'route' => 'route',
'baggage_claim' => 'baggage_claim',
'seats_cabin_business' => 'seats_cabin_business',
'seats_cabin_coach' => 'seats_cabin_coach',
'seats_cabin_first' => 'seats_cabin_first',
'gate_origin' => 'gate_origin',
'gate_destination' => 'gate_destination',
'terminal_origin' => 'terminal_origin',
'terminal_destination' => 'terminal_destination',
'type' => 'type',
'scheduled_out' => 'scheduled_out',
'estimated_out' => 'estimated_out',
'actual_out' => 'actual_out',
'scheduled_off' => 'scheduled_off',
'estimated_off' => 'estimated_off',
'actual_off' => 'actual_off',
'scheduled_on' => 'scheduled_on',
'estimated_on' => 'estimated_on',
'actual_on' => 'actual_on',
'scheduled_in' => 'scheduled_in',
'estimated_in' => 'estimated_in',
'actual_in' => 'actual_in'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ident' => 'setIdent',
'ident_icao' => 'setIdentIcao',
'ident_iata' => 'setIdentIata',
'fa_flight_id' => 'setFaFlightId',
'operator' => 'setOperator',
'operator_icao' => 'setOperatorIcao',
'operator_iata' => 'setOperatorIata',
'flight_number' => 'setFlightNumber',
'registration' => 'setRegistration',
'atc_ident' => 'setAtcIdent',
'inbound_fa_flight_id' => 'setInboundFaFlightId',
'codeshares' => 'setCodeshares',
'codeshares_iata' => 'setCodesharesIata',
'blocked' => 'setBlocked',
'diverted' => 'setDiverted',
'cancelled' => 'setCancelled',
'position_only' => 'setPositionOnly',
'origin' => 'setOrigin',
'destination' => 'setDestination',
'departure_delay' => 'setDepartureDelay',
'arrival_delay' => 'setArrivalDelay',
'filed_ete' => 'setFiledEte',
'progress_percent' => 'setProgressPercent',
'status' => 'setStatus',
'aircraft_type' => 'setAircraftType',
'route_distance' => 'setRouteDistance',
'filed_airspeed' => 'setFiledAirspeed',
'filed_altitude' => 'setFiledAltitude',
'route' => 'setRoute',
'baggage_claim' => 'setBaggageClaim',
'seats_cabin_business' => 'setSeatsCabinBusiness',
'seats_cabin_coach' => 'setSeatsCabinCoach',
'seats_cabin_first' => 'setSeatsCabinFirst',
'gate_origin' => 'setGateOrigin',
'gate_destination' => 'setGateDestination',
'terminal_origin' => 'setTerminalOrigin',
'terminal_destination' => 'setTerminalDestination',
'type' => 'setType',
'scheduled_out' => 'setScheduledOut',
'estimated_out' => 'setEstimatedOut',
'actual_out' => 'setActualOut',
'scheduled_off' => 'setScheduledOff',
'estimated_off' => 'setEstimatedOff',
'actual_off' => 'setActualOff',
'scheduled_on' => 'setScheduledOn',
'estimated_on' => 'setEstimatedOn',
'actual_on' => 'setActualOn',
'scheduled_in' => 'setScheduledIn',
'estimated_in' => 'setEstimatedIn',
'actual_in' => 'setActualIn'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ident' => 'getIdent',
'ident_icao' => 'getIdentIcao',
'ident_iata' => 'getIdentIata',
'fa_flight_id' => 'getFaFlightId',
'operator' => 'getOperator',
'operator_icao' => 'getOperatorIcao',
'operator_iata' => 'getOperatorIata',
'flight_number' => 'getFlightNumber',
'registration' => 'getRegistration',
'atc_ident' => 'getAtcIdent',
'inbound_fa_flight_id' => 'getInboundFaFlightId',
'codeshares' => 'getCodeshares',
'codeshares_iata' => 'getCodesharesIata',
'blocked' => 'getBlocked',
'diverted' => 'getDiverted',
'cancelled' => 'getCancelled',
'position_only' => 'getPositionOnly',
'origin' => 'getOrigin',
'destination' => 'getDestination',
'departure_delay' => 'getDepartureDelay',
'arrival_delay' => 'getArrivalDelay',
'filed_ete' => 'getFiledEte',
'progress_percent' => 'getProgressPercent',
'status' => 'getStatus',
'aircraft_type' => 'getAircraftType',
'route_distance' => 'getRouteDistance',
'filed_airspeed' => 'getFiledAirspeed',
'filed_altitude' => 'getFiledAltitude',
'route' => 'getRoute',
'baggage_claim' => 'getBaggageClaim',
'seats_cabin_business' => 'getSeatsCabinBusiness',
'seats_cabin_coach' => 'getSeatsCabinCoach',
'seats_cabin_first' => 'getSeatsCabinFirst',
'gate_origin' => 'getGateOrigin',
'gate_destination' => 'getGateDestination',
'terminal_origin' => 'getTerminalOrigin',
'terminal_destination' => 'getTerminalDestination',
'type' => 'getType',
'scheduled_out' => 'getScheduledOut',
'estimated_out' => 'getEstimatedOut',
'actual_out' => 'getActualOut',
'scheduled_off' => 'getScheduledOff',
'estimated_off' => 'getEstimatedOff',
'actual_off' => 'getActualOff',
'scheduled_on' => 'getScheduledOn',
'estimated_on' => 'getEstimatedOn',
'actual_on' => 'getActualOn',
'scheduled_in' => 'getScheduledIn',
'estimated_in' => 'getEstimatedIn',
'actual_in' => 'getActualIn'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_GENERAL_AVIATION = 'General_Aviation';
const TYPE_AIRLINE = 'Airline';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GENERAL_AVIATION,
self::TYPE_AIRLINE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['ident_icao'] = isset($data['ident_icao']) ? $data['ident_icao'] : null;
        $this->container['ident_iata'] = isset($data['ident_iata']) ? $data['ident_iata'] : null;
        $this->container['fa_flight_id'] = isset($data['fa_flight_id']) ? $data['fa_flight_id'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['operator_icao'] = isset($data['operator_icao']) ? $data['operator_icao'] : null;
        $this->container['operator_iata'] = isset($data['operator_iata']) ? $data['operator_iata'] : null;
        $this->container['flight_number'] = isset($data['flight_number']) ? $data['flight_number'] : null;
        $this->container['registration'] = isset($data['registration']) ? $data['registration'] : null;
        $this->container['atc_ident'] = isset($data['atc_ident']) ? $data['atc_ident'] : null;
        $this->container['inbound_fa_flight_id'] = isset($data['inbound_fa_flight_id']) ? $data['inbound_fa_flight_id'] : null;
        $this->container['codeshares'] = isset($data['codeshares']) ? $data['codeshares'] : null;
        $this->container['codeshares_iata'] = isset($data['codeshares_iata']) ? $data['codeshares_iata'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['diverted'] = isset($data['diverted']) ? $data['diverted'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['position_only'] = isset($data['position_only']) ? $data['position_only'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['departure_delay'] = isset($data['departure_delay']) ? $data['departure_delay'] : null;
        $this->container['arrival_delay'] = isset($data['arrival_delay']) ? $data['arrival_delay'] : null;
        $this->container['filed_ete'] = isset($data['filed_ete']) ? $data['filed_ete'] : null;
        $this->container['progress_percent'] = isset($data['progress_percent']) ? $data['progress_percent'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['aircraft_type'] = isset($data['aircraft_type']) ? $data['aircraft_type'] : null;
        $this->container['route_distance'] = isset($data['route_distance']) ? $data['route_distance'] : null;
        $this->container['filed_airspeed'] = isset($data['filed_airspeed']) ? $data['filed_airspeed'] : null;
        $this->container['filed_altitude'] = isset($data['filed_altitude']) ? $data['filed_altitude'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['baggage_claim'] = isset($data['baggage_claim']) ? $data['baggage_claim'] : null;
        $this->container['seats_cabin_business'] = isset($data['seats_cabin_business']) ? $data['seats_cabin_business'] : null;
        $this->container['seats_cabin_coach'] = isset($data['seats_cabin_coach']) ? $data['seats_cabin_coach'] : null;
        $this->container['seats_cabin_first'] = isset($data['seats_cabin_first']) ? $data['seats_cabin_first'] : null;
        $this->container['gate_origin'] = isset($data['gate_origin']) ? $data['gate_origin'] : null;
        $this->container['gate_destination'] = isset($data['gate_destination']) ? $data['gate_destination'] : null;
        $this->container['terminal_origin'] = isset($data['terminal_origin']) ? $data['terminal_origin'] : null;
        $this->container['terminal_destination'] = isset($data['terminal_destination']) ? $data['terminal_destination'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['scheduled_out'] = isset($data['scheduled_out']) ? $data['scheduled_out'] : null;
        $this->container['estimated_out'] = isset($data['estimated_out']) ? $data['estimated_out'] : null;
        $this->container['actual_out'] = isset($data['actual_out']) ? $data['actual_out'] : null;
        $this->container['scheduled_off'] = isset($data['scheduled_off']) ? $data['scheduled_off'] : null;
        $this->container['estimated_off'] = isset($data['estimated_off']) ? $data['estimated_off'] : null;
        $this->container['actual_off'] = isset($data['actual_off']) ? $data['actual_off'] : null;
        $this->container['scheduled_on'] = isset($data['scheduled_on']) ? $data['scheduled_on'] : null;
        $this->container['estimated_on'] = isset($data['estimated_on']) ? $data['estimated_on'] : null;
        $this->container['actual_on'] = isset($data['actual_on']) ? $data['actual_on'] : null;
        $this->container['scheduled_in'] = isset($data['scheduled_in']) ? $data['scheduled_in'] : null;
        $this->container['estimated_in'] = isset($data['estimated_in']) ? $data['estimated_in'] : null;
        $this->container['actual_in'] = isset($data['actual_in']) ? $data['actual_in'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ident'] === null) {
            $invalidProperties[] = "'ident' can't be null";
        }
        if ($this->container['fa_flight_id'] === null) {
            $invalidProperties[] = "'fa_flight_id' can't be null";
        }
        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        if ($this->container['operator_iata'] === null) {
            $invalidProperties[] = "'operator_iata' can't be null";
        }
        if ($this->container['flight_number'] === null) {
            $invalidProperties[] = "'flight_number' can't be null";
        }
        if ($this->container['registration'] === null) {
            $invalidProperties[] = "'registration' can't be null";
        }
        if ($this->container['atc_ident'] === null) {
            $invalidProperties[] = "'atc_ident' can't be null";
        }
        if ($this->container['inbound_fa_flight_id'] === null) {
            $invalidProperties[] = "'inbound_fa_flight_id' can't be null";
        }
        if ($this->container['codeshares'] === null) {
            $invalidProperties[] = "'codeshares' can't be null";
        }
        if ($this->container['blocked'] === null) {
            $invalidProperties[] = "'blocked' can't be null";
        }
        if ($this->container['diverted'] === null) {
            $invalidProperties[] = "'diverted' can't be null";
        }
        if ($this->container['cancelled'] === null) {
            $invalidProperties[] = "'cancelled' can't be null";
        }
        if ($this->container['position_only'] === null) {
            $invalidProperties[] = "'position_only' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['departure_delay'] === null) {
            $invalidProperties[] = "'departure_delay' can't be null";
        }
        if ($this->container['arrival_delay'] === null) {
            $invalidProperties[] = "'arrival_delay' can't be null";
        }
        if ($this->container['filed_ete'] === null) {
            $invalidProperties[] = "'filed_ete' can't be null";
        }
        if ($this->container['progress_percent'] === null) {
            $invalidProperties[] = "'progress_percent' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['aircraft_type'] === null) {
            $invalidProperties[] = "'aircraft_type' can't be null";
        }
        if ($this->container['route_distance'] === null) {
            $invalidProperties[] = "'route_distance' can't be null";
        }
        if ($this->container['filed_airspeed'] === null) {
            $invalidProperties[] = "'filed_airspeed' can't be null";
        }
        if ($this->container['filed_altitude'] === null) {
            $invalidProperties[] = "'filed_altitude' can't be null";
        }
        if ($this->container['route'] === null) {
            $invalidProperties[] = "'route' can't be null";
        }
        if ($this->container['baggage_claim'] === null) {
            $invalidProperties[] = "'baggage_claim' can't be null";
        }
        if ($this->container['seats_cabin_business'] === null) {
            $invalidProperties[] = "'seats_cabin_business' can't be null";
        }
        if ($this->container['seats_cabin_coach'] === null) {
            $invalidProperties[] = "'seats_cabin_coach' can't be null";
        }
        if ($this->container['seats_cabin_first'] === null) {
            $invalidProperties[] = "'seats_cabin_first' can't be null";
        }
        if ($this->container['gate_origin'] === null) {
            $invalidProperties[] = "'gate_origin' can't be null";
        }
        if ($this->container['gate_destination'] === null) {
            $invalidProperties[] = "'gate_destination' can't be null";
        }
        if ($this->container['terminal_origin'] === null) {
            $invalidProperties[] = "'terminal_origin' can't be null";
        }
        if ($this->container['terminal_destination'] === null) {
            $invalidProperties[] = "'terminal_destination' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['scheduled_out'] === null) {
            $invalidProperties[] = "'scheduled_out' can't be null";
        }
        if ($this->container['estimated_out'] === null) {
            $invalidProperties[] = "'estimated_out' can't be null";
        }
        if ($this->container['actual_out'] === null) {
            $invalidProperties[] = "'actual_out' can't be null";
        }
        if ($this->container['scheduled_off'] === null) {
            $invalidProperties[] = "'scheduled_off' can't be null";
        }
        if ($this->container['estimated_off'] === null) {
            $invalidProperties[] = "'estimated_off' can't be null";
        }
        if ($this->container['actual_off'] === null) {
            $invalidProperties[] = "'actual_off' can't be null";
        }
        if ($this->container['scheduled_on'] === null) {
            $invalidProperties[] = "'scheduled_on' can't be null";
        }
        if ($this->container['estimated_on'] === null) {
            $invalidProperties[] = "'estimated_on' can't be null";
        }
        if ($this->container['actual_on'] === null) {
            $invalidProperties[] = "'actual_on' can't be null";
        }
        if ($this->container['scheduled_in'] === null) {
            $invalidProperties[] = "'scheduled_in' can't be null";
        }
        if ($this->container['estimated_in'] === null) {
            $invalidProperties[] = "'estimated_in' can't be null";
        }
        if ($this->container['actual_in'] === null) {
            $invalidProperties[] = "'actual_in' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident Either the operator code followed by the flight number for the flight (for commercial flights) or the aircraft's registration (for general aviation).
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets ident_icao
     *
     * @return string
     */
    public function getIdentIcao()
    {
        return $this->container['ident_icao'];
    }

    /**
     * Sets ident_icao
     *
     * @param string $ident_icao The ICAO operator code followed by the flight number for the flight (for commercial flights)
     *
     * @return $this
     */
    public function setIdentIcao($ident_icao)
    {
        $this->container['ident_icao'] = $ident_icao;

        return $this;
    }

    /**
     * Gets ident_iata
     *
     * @return string
     */
    public function getIdentIata()
    {
        return $this->container['ident_iata'];
    }

    /**
     * Sets ident_iata
     *
     * @param string $ident_iata The IATA operator code followed by the flight number for the flight (for commercial flights)
     *
     * @return $this
     */
    public function setIdentIata($ident_iata)
    {
        $this->container['ident_iata'] = $ident_iata;

        return $this;
    }

    /**
     * Gets fa_flight_id
     *
     * @return string
     */
    public function getFaFlightId()
    {
        return $this->container['fa_flight_id'];
    }

    /**
     * Sets fa_flight_id
     *
     * @param string $fa_flight_id Unique identifier assigned by FlightAware for this specific flight. If the flight is diverted, the new leg of the flight will have a duplicate fa_flight_id.
     *
     * @return $this
     */
    public function setFaFlightId($fa_flight_id)
    {
        $this->container['fa_flight_id'] = $fa_flight_id;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator ICAO code, if exists, of the operator of the flight, otherwise the IATA code
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets operator_icao
     *
     * @return string
     */
    public function getOperatorIcao()
    {
        return $this->container['operator_icao'];
    }

    /**
     * Sets operator_icao
     *
     * @param string $operator_icao ICAO code of the operator of the flight.
     *
     * @return $this
     */
    public function setOperatorIcao($operator_icao)
    {
        $this->container['operator_icao'] = $operator_icao;

        return $this;
    }

    /**
     * Gets operator_iata
     *
     * @return string
     */
    public function getOperatorIata()
    {
        return $this->container['operator_iata'];
    }

    /**
     * Sets operator_iata
     *
     * @param string $operator_iata IATA code of the operator of the flight.
     *
     * @return $this
     */
    public function setOperatorIata($operator_iata)
    {
        $this->container['operator_iata'] = $operator_iata;

        return $this;
    }

    /**
     * Gets flight_number
     *
     * @return string
     */
    public function getFlightNumber()
    {
        return $this->container['flight_number'];
    }

    /**
     * Sets flight_number
     *
     * @param string $flight_number Bare flight number of the flight.
     *
     * @return $this
     */
    public function setFlightNumber($flight_number)
    {
        $this->container['flight_number'] = $flight_number;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return string
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param string $registration Aircraft registration (tail number) of the aircraft, when known.
     *
     * @return $this
     */
    public function setRegistration($registration)
    {
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets atc_ident
     *
     * @return string
     */
    public function getAtcIdent()
    {
        return $this->container['atc_ident'];
    }

    /**
     * Sets atc_ident
     *
     * @param string $atc_ident The ident of the flight for Air Traffic Control purposes, when known and different than ident.
     *
     * @return $this
     */
    public function setAtcIdent($atc_ident)
    {
        $this->container['atc_ident'] = $atc_ident;

        return $this;
    }

    /**
     * Gets inbound_fa_flight_id
     *
     * @return string
     */
    public function getInboundFaFlightId()
    {
        return $this->container['inbound_fa_flight_id'];
    }

    /**
     * Sets inbound_fa_flight_id
     *
     * @param string $inbound_fa_flight_id Unique identifier assigned by FlightAware for the previous flight of the aircraft serving this flight.
     *
     * @return $this
     */
    public function setInboundFaFlightId($inbound_fa_flight_id)
    {
        $this->container['inbound_fa_flight_id'] = $inbound_fa_flight_id;

        return $this;
    }

    /**
     * Gets codeshares
     *
     * @return string[]
     */
    public function getCodeshares()
    {
        return $this->container['codeshares'];
    }

    /**
     * Sets codeshares
     *
     * @param string[] $codeshares List of any ICAO codeshares operating on this flight.
     *
     * @return $this
     */
    public function setCodeshares($codeshares)
    {
        $this->container['codeshares'] = $codeshares;

        return $this;
    }

    /**
     * Gets codeshares_iata
     *
     * @return string[]
     */
    public function getCodesharesIata()
    {
        return $this->container['codeshares_iata'];
    }

    /**
     * Sets codeshares_iata
     *
     * @param string[] $codeshares_iata List of any IATA codeshares operating on this flight.
     *
     * @return $this
     */
    public function setCodesharesIata($codeshares_iata)
    {
        $this->container['codeshares_iata'] = $codeshares_iata;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool $blocked Flag indicating whether this flight is blocked from public viewing.
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets diverted
     *
     * @return bool
     */
    public function getDiverted()
    {
        return $this->container['diverted'];
    }

    /**
     * Sets diverted
     *
     * @param bool $diverted Flag indicating whether this flight was diverted.
     *
     * @return $this
     */
    public function setDiverted($diverted)
    {
        $this->container['diverted'] = $diverted;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool $cancelled Flag indicating that the flight is no longer being tracked by FlightAware. There are a number of reasons this could happen including cancellation by the airline, but that will not always be the case.
     *
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets position_only
     *
     * @return bool
     */
    public function getPositionOnly()
    {
        return $this->container['position_only'];
    }

    /**
     * Sets position_only
     *
     * @param bool $position_only Flag indicating that this flight does not have a flight plan, schedule, or other indication of intent available.
     *
     * @return $this
     */
    public function setPositionOnly($position_only)
    {
        $this->container['position_only'] = $position_only;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \FlightAware\PHPClient\Model\FlightAirportRef
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \FlightAware\PHPClient\Model\FlightAirportRef $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \FlightAware\PHPClient\Model\FlightAirportRef1
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \FlightAware\PHPClient\Model\FlightAirportRef1 $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets departure_delay
     *
     * @return int
     */
    public function getDepartureDelay()
    {
        return $this->container['departure_delay'];
    }

    /**
     * Sets departure_delay
     *
     * @param int $departure_delay Arrival delay (in seconds) based on either actual or estimated gate arrival time. If gate time is unavailable then based on runway arrival time. A negative value indicates the flight is early.
     *
     * @return $this
     */
    public function setDepartureDelay($departure_delay)
    {
        $this->container['departure_delay'] = $departure_delay;

        return $this;
    }

    /**
     * Gets arrival_delay
     *
     * @return int
     */
    public function getArrivalDelay()
    {
        return $this->container['arrival_delay'];
    }

    /**
     * Sets arrival_delay
     *
     * @param int $arrival_delay Departure delay (in seconds) based on either actual or estimated gate departure time. If gate time is unavailable then based on runway departure time. A negative value indicates the flight is early.
     *
     * @return $this
     */
    public function setArrivalDelay($arrival_delay)
    {
        $this->container['arrival_delay'] = $arrival_delay;

        return $this;
    }

    /**
     * Gets filed_ete
     *
     * @return int
     */
    public function getFiledEte()
    {
        return $this->container['filed_ete'];
    }

    /**
     * Sets filed_ete
     *
     * @param int $filed_ete Runway-to-runway filed duration (seconds).
     *
     * @return $this
     */
    public function setFiledEte($filed_ete)
    {
        $this->container['filed_ete'] = $filed_ete;

        return $this;
    }

    /**
     * Gets progress_percent
     *
     * @return int
     */
    public function getProgressPercent()
    {
        return $this->container['progress_percent'];
    }

    /**
     * Sets progress_percent
     *
     * @param int $progress_percent The percent completion of a flight, based on runway departure/arrival. Null for en route position-only flights.
     *
     * @return $this
     */
    public function setProgressPercent($progress_percent)
    {
        $this->container['progress_percent'] = $progress_percent;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Human-readable summary of flight status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets aircraft_type
     *
     * @return string
     */
    public function getAircraftType()
    {
        return $this->container['aircraft_type'];
    }

    /**
     * Sets aircraft_type
     *
     * @param string $aircraft_type Aircraft type will generally be ICAO code, but IATA code will be given when the ICAO code is not known.
     *
     * @return $this
     */
    public function setAircraftType($aircraft_type)
    {
        $this->container['aircraft_type'] = $aircraft_type;

        return $this;
    }

    /**
     * Gets route_distance
     *
     * @return int
     */
    public function getRouteDistance()
    {
        return $this->container['route_distance'];
    }

    /**
     * Sets route_distance
     *
     * @param int $route_distance Planned flight distance (statute miles) based on the filed route. May vary from actual flown distance.
     *
     * @return $this
     */
    public function setRouteDistance($route_distance)
    {
        $this->container['route_distance'] = $route_distance;

        return $this;
    }

    /**
     * Gets filed_airspeed
     *
     * @return int
     */
    public function getFiledAirspeed()
    {
        return $this->container['filed_airspeed'];
    }

    /**
     * Sets filed_airspeed
     *
     * @param int $filed_airspeed Filed IFR airspeed (knots).
     *
     * @return $this
     */
    public function setFiledAirspeed($filed_airspeed)
    {
        $this->container['filed_airspeed'] = $filed_airspeed;

        return $this;
    }

    /**
     * Gets filed_altitude
     *
     * @return int
     */
    public function getFiledAltitude()
    {
        return $this->container['filed_altitude'];
    }

    /**
     * Sets filed_altitude
     *
     * @param int $filed_altitude Filed IFR altitude (100s of feet).
     *
     * @return $this
     */
    public function setFiledAltitude($filed_altitude)
    {
        $this->container['filed_altitude'] = $filed_altitude;

        return $this;
    }

    /**
     * Gets route
     *
     * @return string
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param string $route The textual description of the flight's route.
     *
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets baggage_claim
     *
     * @return string
     */
    public function getBaggageClaim()
    {
        return $this->container['baggage_claim'];
    }

    /**
     * Sets baggage_claim
     *
     * @param string $baggage_claim Baggage claim location at the destination airport.
     *
     * @return $this
     */
    public function setBaggageClaim($baggage_claim)
    {
        $this->container['baggage_claim'] = $baggage_claim;

        return $this;
    }

    /**
     * Gets seats_cabin_business
     *
     * @return int
     */
    public function getSeatsCabinBusiness()
    {
        return $this->container['seats_cabin_business'];
    }

    /**
     * Sets seats_cabin_business
     *
     * @param int $seats_cabin_business Number of seats in the business class cabin.
     *
     * @return $this
     */
    public function setSeatsCabinBusiness($seats_cabin_business)
    {
        $this->container['seats_cabin_business'] = $seats_cabin_business;

        return $this;
    }

    /**
     * Gets seats_cabin_coach
     *
     * @return int
     */
    public function getSeatsCabinCoach()
    {
        return $this->container['seats_cabin_coach'];
    }

    /**
     * Sets seats_cabin_coach
     *
     * @param int $seats_cabin_coach Number of seats in the coach cabin.
     *
     * @return $this
     */
    public function setSeatsCabinCoach($seats_cabin_coach)
    {
        $this->container['seats_cabin_coach'] = $seats_cabin_coach;

        return $this;
    }

    /**
     * Gets seats_cabin_first
     *
     * @return int
     */
    public function getSeatsCabinFirst()
    {
        return $this->container['seats_cabin_first'];
    }

    /**
     * Sets seats_cabin_first
     *
     * @param int $seats_cabin_first Number of seats in the first class cabin.
     *
     * @return $this
     */
    public function setSeatsCabinFirst($seats_cabin_first)
    {
        $this->container['seats_cabin_first'] = $seats_cabin_first;

        return $this;
    }

    /**
     * Gets gate_origin
     *
     * @return string
     */
    public function getGateOrigin()
    {
        return $this->container['gate_origin'];
    }

    /**
     * Sets gate_origin
     *
     * @param string $gate_origin Departure gate at the origin airport.
     *
     * @return $this
     */
    public function setGateOrigin($gate_origin)
    {
        $this->container['gate_origin'] = $gate_origin;

        return $this;
    }

    /**
     * Gets gate_destination
     *
     * @return string
     */
    public function getGateDestination()
    {
        return $this->container['gate_destination'];
    }

    /**
     * Sets gate_destination
     *
     * @param string $gate_destination Arrival gate at the destination airport.
     *
     * @return $this
     */
    public function setGateDestination($gate_destination)
    {
        $this->container['gate_destination'] = $gate_destination;

        return $this;
    }

    /**
     * Gets terminal_origin
     *
     * @return string
     */
    public function getTerminalOrigin()
    {
        return $this->container['terminal_origin'];
    }

    /**
     * Sets terminal_origin
     *
     * @param string $terminal_origin Departure terminal at the origin airport.
     *
     * @return $this
     */
    public function setTerminalOrigin($terminal_origin)
    {
        $this->container['terminal_origin'] = $terminal_origin;

        return $this;
    }

    /**
     * Gets terminal_destination
     *
     * @return string
     */
    public function getTerminalDestination()
    {
        return $this->container['terminal_destination'];
    }

    /**
     * Sets terminal_destination
     *
     * @param string $terminal_destination Arrival terminal at the destination airport.
     *
     * @return $this
     */
    public function setTerminalDestination($terminal_destination)
    {
        $this->container['terminal_destination'] = $terminal_destination;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Whether this is a commercial or general aviation flight.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets scheduled_out
     *
     * @return \DateTime
     */
    public function getScheduledOut()
    {
        return $this->container['scheduled_out'];
    }

    /**
     * Sets scheduled_out
     *
     * @param \DateTime $scheduled_out Scheduled gate departure time.
     *
     * @return $this
     */
    public function setScheduledOut($scheduled_out)
    {
        $this->container['scheduled_out'] = $scheduled_out;

        return $this;
    }

    /**
     * Gets estimated_out
     *
     * @return \DateTime
     */
    public function getEstimatedOut()
    {
        return $this->container['estimated_out'];
    }

    /**
     * Sets estimated_out
     *
     * @param \DateTime $estimated_out Estimated gate departure time.
     *
     * @return $this
     */
    public function setEstimatedOut($estimated_out)
    {
        $this->container['estimated_out'] = $estimated_out;

        return $this;
    }

    /**
     * Gets actual_out
     *
     * @return \DateTime
     */
    public function getActualOut()
    {
        return $this->container['actual_out'];
    }

    /**
     * Sets actual_out
     *
     * @param \DateTime $actual_out Actual gate departure time.
     *
     * @return $this
     */
    public function setActualOut($actual_out)
    {
        $this->container['actual_out'] = $actual_out;

        return $this;
    }

    /**
     * Gets scheduled_off
     *
     * @return \DateTime
     */
    public function getScheduledOff()
    {
        return $this->container['scheduled_off'];
    }

    /**
     * Sets scheduled_off
     *
     * @param \DateTime $scheduled_off Scheduled runway departure time.
     *
     * @return $this
     */
    public function setScheduledOff($scheduled_off)
    {
        $this->container['scheduled_off'] = $scheduled_off;

        return $this;
    }

    /**
     * Gets estimated_off
     *
     * @return \DateTime
     */
    public function getEstimatedOff()
    {
        return $this->container['estimated_off'];
    }

    /**
     * Sets estimated_off
     *
     * @param \DateTime $estimated_off Estimated runway departure time.
     *
     * @return $this
     */
    public function setEstimatedOff($estimated_off)
    {
        $this->container['estimated_off'] = $estimated_off;

        return $this;
    }

    /**
     * Gets actual_off
     *
     * @return \DateTime
     */
    public function getActualOff()
    {
        return $this->container['actual_off'];
    }

    /**
     * Sets actual_off
     *
     * @param \DateTime $actual_off Actual runway departure time.
     *
     * @return $this
     */
    public function setActualOff($actual_off)
    {
        $this->container['actual_off'] = $actual_off;

        return $this;
    }

    /**
     * Gets scheduled_on
     *
     * @return \DateTime
     */
    public function getScheduledOn()
    {
        return $this->container['scheduled_on'];
    }

    /**
     * Sets scheduled_on
     *
     * @param \DateTime $scheduled_on Scheduled runway arrival time.
     *
     * @return $this
     */
    public function setScheduledOn($scheduled_on)
    {
        $this->container['scheduled_on'] = $scheduled_on;

        return $this;
    }

    /**
     * Gets estimated_on
     *
     * @return \DateTime
     */
    public function getEstimatedOn()
    {
        return $this->container['estimated_on'];
    }

    /**
     * Sets estimated_on
     *
     * @param \DateTime $estimated_on Estimated runway arrival time.
     *
     * @return $this
     */
    public function setEstimatedOn($estimated_on)
    {
        $this->container['estimated_on'] = $estimated_on;

        return $this;
    }

    /**
     * Gets actual_on
     *
     * @return \DateTime
     */
    public function getActualOn()
    {
        return $this->container['actual_on'];
    }

    /**
     * Sets actual_on
     *
     * @param \DateTime $actual_on Actual runway arrival time.
     *
     * @return $this
     */
    public function setActualOn($actual_on)
    {
        $this->container['actual_on'] = $actual_on;

        return $this;
    }

    /**
     * Gets scheduled_in
     *
     * @return \DateTime
     */
    public function getScheduledIn()
    {
        return $this->container['scheduled_in'];
    }

    /**
     * Sets scheduled_in
     *
     * @param \DateTime $scheduled_in Scheduled gate arrival time.
     *
     * @return $this
     */
    public function setScheduledIn($scheduled_in)
    {
        $this->container['scheduled_in'] = $scheduled_in;

        return $this;
    }

    /**
     * Gets estimated_in
     *
     * @return \DateTime
     */
    public function getEstimatedIn()
    {
        return $this->container['estimated_in'];
    }

    /**
     * Sets estimated_in
     *
     * @param \DateTime $estimated_in Estimated gate arrival time.
     *
     * @return $this
     */
    public function setEstimatedIn($estimated_in)
    {
        $this->container['estimated_in'] = $estimated_in;

        return $this;
    }

    /**
     * Gets actual_in
     *
     * @return \DateTime
     */
    public function getActualIn()
    {
        return $this->container['actual_in'];
    }

    /**
     * Sets actual_in
     *
     * @param \DateTime $actual_in Actual gate arrival time.
     *
     * @return $this
     */
    public function setActualIn($actual_in)
    {
        $this->container['actual_in'] = $actual_in;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
