<?php
/**
 * AlertsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresight™, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresight™ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FlightAware\PHPClient\Model;

use \ArrayAccess;
use \FlightAware\PHPClient\ObjectSerializer;

/**
 * AlertsBody Class Doc Comment
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlertsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'alerts_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'description' => 'string',
'ident' => 'string',
'ident_icao' => 'string',
'ident_iata' => 'string',
'origin' => 'string',
'origin_icao' => 'string',
'origin_iata' => 'string',
'origin_lid' => 'string',
'destination' => 'string',
'destination_icao' => 'string',
'destination_iata' => 'string',
'destination_lid' => 'string',
'aircraft_type' => 'string',
'created' => '\DateTime',
'changed' => '\DateTime',
'start' => '\DateTime',
'end' => '\DateTime',
'max_weekly' => 'int',
'user_ident' => 'string',
'eta' => 'int',
'events' => '\FlightAware\PHPClient\Model\AlertsEvents',
'target_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'description' => null,
'ident' => null,
'ident_icao' => null,
'ident_iata' => null,
'origin' => null,
'origin_icao' => null,
'origin_iata' => null,
'origin_lid' => null,
'destination' => null,
'destination_icao' => null,
'destination_iata' => null,
'destination_lid' => null,
'aircraft_type' => null,
'created' => 'date-time',
'changed' => 'date-time',
'start' => 'date',
'end' => 'date',
'max_weekly' => null,
'user_ident' => null,
'eta' => null,
'events' => null,
'target_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'description' => 'description',
'ident' => 'ident',
'ident_icao' => 'ident_icao',
'ident_iata' => 'ident_iata',
'origin' => 'origin',
'origin_icao' => 'origin_icao',
'origin_iata' => 'origin_iata',
'origin_lid' => 'origin_lid',
'destination' => 'destination',
'destination_icao' => 'destination_icao',
'destination_iata' => 'destination_iata',
'destination_lid' => 'destination_lid',
'aircraft_type' => 'aircraft_type',
'created' => 'created',
'changed' => 'changed',
'start' => 'start',
'end' => 'end',
'max_weekly' => 'max_weekly',
'user_ident' => 'user_ident',
'eta' => 'eta',
'events' => 'events',
'target_url' => 'target_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'description' => 'setDescription',
'ident' => 'setIdent',
'ident_icao' => 'setIdentIcao',
'ident_iata' => 'setIdentIata',
'origin' => 'setOrigin',
'origin_icao' => 'setOriginIcao',
'origin_iata' => 'setOriginIata',
'origin_lid' => 'setOriginLid',
'destination' => 'setDestination',
'destination_icao' => 'setDestinationIcao',
'destination_iata' => 'setDestinationIata',
'destination_lid' => 'setDestinationLid',
'aircraft_type' => 'setAircraftType',
'created' => 'setCreated',
'changed' => 'setChanged',
'start' => 'setStart',
'end' => 'setEnd',
'max_weekly' => 'setMaxWeekly',
'user_ident' => 'setUserIdent',
'eta' => 'setEta',
'events' => 'setEvents',
'target_url' => 'setTargetUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'description' => 'getDescription',
'ident' => 'getIdent',
'ident_icao' => 'getIdentIcao',
'ident_iata' => 'getIdentIata',
'origin' => 'getOrigin',
'origin_icao' => 'getOriginIcao',
'origin_iata' => 'getOriginIata',
'origin_lid' => 'getOriginLid',
'destination' => 'getDestination',
'destination_icao' => 'getDestinationIcao',
'destination_iata' => 'getDestinationIata',
'destination_lid' => 'getDestinationLid',
'aircraft_type' => 'getAircraftType',
'created' => 'getCreated',
'changed' => 'getChanged',
'start' => 'getStart',
'end' => 'getEnd',
'max_weekly' => 'getMaxWeekly',
'user_ident' => 'getUserIdent',
'eta' => 'getEta',
'events' => 'getEvents',
'target_url' => 'getTargetUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['ident_icao'] = isset($data['ident_icao']) ? $data['ident_icao'] : null;
        $this->container['ident_iata'] = isset($data['ident_iata']) ? $data['ident_iata'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['origin_icao'] = isset($data['origin_icao']) ? $data['origin_icao'] : null;
        $this->container['origin_iata'] = isset($data['origin_iata']) ? $data['origin_iata'] : null;
        $this->container['origin_lid'] = isset($data['origin_lid']) ? $data['origin_lid'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['destination_icao'] = isset($data['destination_icao']) ? $data['destination_icao'] : null;
        $this->container['destination_iata'] = isset($data['destination_iata']) ? $data['destination_iata'] : null;
        $this->container['destination_lid'] = isset($data['destination_lid']) ? $data['destination_lid'] : null;
        $this->container['aircraft_type'] = isset($data['aircraft_type']) ? $data['aircraft_type'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['changed'] = isset($data['changed']) ? $data['changed'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['max_weekly'] = isset($data['max_weekly']) ? $data['max_weekly'] : 1000;
        $this->container['user_ident'] = isset($data['user_ident']) ? $data['user_ident'] : null;
        $this->container['eta'] = isset($data['eta']) ? $data['eta'] : 0;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['target_url'] = isset($data['target_url']) ? $data['target_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['ident'] === null) {
            $invalidProperties[] = "'ident' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['aircraft_type'] === null) {
            $invalidProperties[] = "'aircraft_type' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['changed'] === null) {
            $invalidProperties[] = "'changed' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['user_ident'] === null) {
            $invalidProperties[] = "'user_ident' can't be null";
        }
        if ($this->container['eta'] === null) {
            $invalidProperties[] = "'eta' can't be null";
        }
        if ($this->container['events'] === null) {
            $invalidProperties[] = "'events' can't be null";
        }
        if ($this->container['target_url'] === null) {
            $invalidProperties[] = "'target_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for alert, can be used to update or delete alert.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Server-generated textual description of alert. May include carrier, flight number, origin, destination, etc.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident Ident to alert on. This value may be modified based on codeshare resolution. If that occurs, the originally provided ident will be preserved in the user_ident field.
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets ident_icao
     *
     * @return string
     */
    public function getIdentIcao()
    {
        return $this->container['ident_icao'];
    }

    /**
     * Sets ident_icao
     *
     * @param string $ident_icao ICAO ident to alert on
     *
     * @return $this
     */
    public function setIdentIcao($ident_icao)
    {
        $this->container['ident_icao'] = $ident_icao;

        return $this;
    }

    /**
     * Gets ident_iata
     *
     * @return string
     */
    public function getIdentIata()
    {
        return $this->container['ident_iata'];
    }

    /**
     * Sets ident_iata
     *
     * @param string $ident_iata IATA ident to alert on
     *
     * @return $this
     */
    public function setIdentIata($ident_iata)
    {
        $this->container['ident_iata'] = $ident_iata;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Origin airport ICAO, IATA, or LID code to alert on.
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets origin_icao
     *
     * @return string
     */
    public function getOriginIcao()
    {
        return $this->container['origin_icao'];
    }

    /**
     * Sets origin_icao
     *
     * @param string $origin_icao Origin airport ICAO code to alert on.
     *
     * @return $this
     */
    public function setOriginIcao($origin_icao)
    {
        $this->container['origin_icao'] = $origin_icao;

        return $this;
    }

    /**
     * Gets origin_iata
     *
     * @return string
     */
    public function getOriginIata()
    {
        return $this->container['origin_iata'];
    }

    /**
     * Sets origin_iata
     *
     * @param string $origin_iata Origin airport IATA code to alert on.
     *
     * @return $this
     */
    public function setOriginIata($origin_iata)
    {
        $this->container['origin_iata'] = $origin_iata;

        return $this;
    }

    /**
     * Gets origin_lid
     *
     * @return string
     */
    public function getOriginLid()
    {
        return $this->container['origin_lid'];
    }

    /**
     * Sets origin_lid
     *
     * @param string $origin_lid Origin airport LID code to alert on.
     *
     * @return $this
     */
    public function setOriginLid($origin_lid)
    {
        $this->container['origin_lid'] = $origin_lid;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination Destination airport ICAO, IATA, or LID code to alert on.
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destination_icao
     *
     * @return string
     */
    public function getDestinationIcao()
    {
        return $this->container['destination_icao'];
    }

    /**
     * Sets destination_icao
     *
     * @param string $destination_icao Destination airport ICAO code to alert on.
     *
     * @return $this
     */
    public function setDestinationIcao($destination_icao)
    {
        $this->container['destination_icao'] = $destination_icao;

        return $this;
    }

    /**
     * Gets destination_iata
     *
     * @return string
     */
    public function getDestinationIata()
    {
        return $this->container['destination_iata'];
    }

    /**
     * Sets destination_iata
     *
     * @param string $destination_iata Destination airport IATA code to alert on.
     *
     * @return $this
     */
    public function setDestinationIata($destination_iata)
    {
        $this->container['destination_iata'] = $destination_iata;

        return $this;
    }

    /**
     * Gets destination_lid
     *
     * @return string
     */
    public function getDestinationLid()
    {
        return $this->container['destination_lid'];
    }

    /**
     * Sets destination_lid
     *
     * @param string $destination_lid Destination airport LID code to alert on.
     *
     * @return $this
     */
    public function setDestinationLid($destination_lid)
    {
        $this->container['destination_lid'] = $destination_lid;

        return $this;
    }

    /**
     * Gets aircraft_type
     *
     * @return string
     */
    public function getAircraftType()
    {
        return $this->container['aircraft_type'];
    }

    /**
     * Sets aircraft_type
     *
     * @param string $aircraft_type Aircraft type ICAO code to alert on.
     *
     * @return $this
     */
    public function setAircraftType($aircraft_type)
    {
        $this->container['aircraft_type'] = $aircraft_type;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Time that the alert was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets changed
     *
     * @return \DateTime
     */
    public function getChanged()
    {
        return $this->container['changed'];
    }

    /**
     * Sets changed
     *
     * @param \DateTime $changed Time that the alert was last modified.
     *
     * @return $this
     */
    public function setChanged($changed)
    {
        $this->container['changed'] = $changed;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start Start date of alert. Should be in departure airport's timezone.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end End date of alert (inclusive). Should be in departure airport's timezone.
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets max_weekly
     *
     * @return int
     */
    public function getMaxWeekly()
    {
        return $this->container['max_weekly'];
    }

    /**
     * Sets max_weekly
     *
     * @param int $max_weekly Reject the new alert if the estimated number of triggered alerts per week based on historical flight trends would exceed this value. Check is only applied at alert creation/modification and does not prevent alerts from being delivered even if they exceed the given amount.
     *
     * @return $this
     */
    public function setMaxWeekly($max_weekly)
    {
        $this->container['max_weekly'] = $max_weekly;

        return $this;
    }

    /**
     * Gets user_ident
     *
     * @return string
     */
    public function getUserIdent()
    {
        return $this->container['user_ident'];
    }

    /**
     * Sets user_ident
     *
     * @param string $user_ident Originally specified ident.
     *
     * @return $this
     */
    public function setUserIdent($user_ident)
    {
        $this->container['user_ident'] = $user_ident;

        return $this;
    }

    /**
     * Gets eta
     *
     * @return int
     */
    public function getEta()
    {
        return $this->container['eta'];
    }

    /**
     * Sets eta
     *
     * @param int $eta How many minutes before a flight's ETA that an alert should be delivered. Alerts will only be delivered after the flight has been in the air for at least 15 minutes. Set to 0 to disable.
     *
     * @return $this
     */
    public function setEta($eta)
    {
        $this->container['eta'] = $eta;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \FlightAware\PHPClient\Model\AlertsEvents
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \FlightAware\PHPClient\Model\AlertsEvents $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets target_url
     *
     * @return string
     */
    public function getTargetUrl()
    {
        return $this->container['target_url'];
    }

    /**
     * Sets target_url
     *
     * @param string $target_url Alert specific URL to deliver to. If null, then the alert will be delivered to the configured account-wide alert URL target.
     *
     * @return $this
     */
    public function setTargetUrl($target_url)
    {
        $this->container['target_url'] = $target_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
