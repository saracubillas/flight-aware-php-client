<?php
/**
 * InlineResponse20039Scheduled
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresightâ„¢, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresightâ„¢ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FlightAware\PHPClient\Model;

use \ArrayAccess;
use \FlightAware\PHPClient\ObjectSerializer;

/**
 * InlineResponse20039Scheduled Class Doc Comment
 *
 * @category Class
 * @description Information for a scheduled flight. All data is sourced from operator&#x27;s schedule and may not reflect actual flight information (even after the flight has occurred).
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20039Scheduled implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_39_scheduled';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ident' => 'string',
'ident_icao' => 'string',
'ident_iata' => 'string',
'actual_ident' => 'string',
'actual_ident_icao' => 'string',
'actual_ident_iata' => 'string',
'aircraft_type' => 'string',
'scheduled_in' => '\DateTime',
'scheduled_out' => '\DateTime',
'origin' => 'string',
'origin_icao' => 'string',
'origin_iata' => 'string',
'origin_lid' => 'string',
'destination' => 'string',
'destination_icao' => 'string',
'destination_iata' => 'string',
'destination_lid' => 'string',
'fa_flight_id' => 'string',
'meal_service' => 'string',
'seats_cabin_business' => 'int',
'seats_cabin_coach' => 'int',
'seats_cabin_first' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ident' => null,
'ident_icao' => null,
'ident_iata' => null,
'actual_ident' => null,
'actual_ident_icao' => null,
'actual_ident_iata' => null,
'aircraft_type' => null,
'scheduled_in' => 'date-time',
'scheduled_out' => 'date-time',
'origin' => null,
'origin_icao' => null,
'origin_iata' => null,
'origin_lid' => null,
'destination' => null,
'destination_icao' => null,
'destination_iata' => null,
'destination_lid' => null,
'fa_flight_id' => null,
'meal_service' => null,
'seats_cabin_business' => null,
'seats_cabin_coach' => null,
'seats_cabin_first' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ident' => 'ident',
'ident_icao' => 'ident_icao',
'ident_iata' => 'ident_iata',
'actual_ident' => 'actual_ident',
'actual_ident_icao' => 'actual_ident_icao',
'actual_ident_iata' => 'actual_ident_iata',
'aircraft_type' => 'aircraft_type',
'scheduled_in' => 'scheduled_in',
'scheduled_out' => 'scheduled_out',
'origin' => 'origin',
'origin_icao' => 'origin_icao',
'origin_iata' => 'origin_iata',
'origin_lid' => 'origin_lid',
'destination' => 'destination',
'destination_icao' => 'destination_icao',
'destination_iata' => 'destination_iata',
'destination_lid' => 'destination_lid',
'fa_flight_id' => 'fa_flight_id',
'meal_service' => 'meal_service',
'seats_cabin_business' => 'seats_cabin_business',
'seats_cabin_coach' => 'seats_cabin_coach',
'seats_cabin_first' => 'seats_cabin_first'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ident' => 'setIdent',
'ident_icao' => 'setIdentIcao',
'ident_iata' => 'setIdentIata',
'actual_ident' => 'setActualIdent',
'actual_ident_icao' => 'setActualIdentIcao',
'actual_ident_iata' => 'setActualIdentIata',
'aircraft_type' => 'setAircraftType',
'scheduled_in' => 'setScheduledIn',
'scheduled_out' => 'setScheduledOut',
'origin' => 'setOrigin',
'origin_icao' => 'setOriginIcao',
'origin_iata' => 'setOriginIata',
'origin_lid' => 'setOriginLid',
'destination' => 'setDestination',
'destination_icao' => 'setDestinationIcao',
'destination_iata' => 'setDestinationIata',
'destination_lid' => 'setDestinationLid',
'fa_flight_id' => 'setFaFlightId',
'meal_service' => 'setMealService',
'seats_cabin_business' => 'setSeatsCabinBusiness',
'seats_cabin_coach' => 'setSeatsCabinCoach',
'seats_cabin_first' => 'setSeatsCabinFirst'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ident' => 'getIdent',
'ident_icao' => 'getIdentIcao',
'ident_iata' => 'getIdentIata',
'actual_ident' => 'getActualIdent',
'actual_ident_icao' => 'getActualIdentIcao',
'actual_ident_iata' => 'getActualIdentIata',
'aircraft_type' => 'getAircraftType',
'scheduled_in' => 'getScheduledIn',
'scheduled_out' => 'getScheduledOut',
'origin' => 'getOrigin',
'origin_icao' => 'getOriginIcao',
'origin_iata' => 'getOriginIata',
'origin_lid' => 'getOriginLid',
'destination' => 'getDestination',
'destination_icao' => 'getDestinationIcao',
'destination_iata' => 'getDestinationIata',
'destination_lid' => 'getDestinationLid',
'fa_flight_id' => 'getFaFlightId',
'meal_service' => 'getMealService',
'seats_cabin_business' => 'getSeatsCabinBusiness',
'seats_cabin_coach' => 'getSeatsCabinCoach',
'seats_cabin_first' => 'getSeatsCabinFirst'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ident'] = isset($data['ident']) ? $data['ident'] : null;
        $this->container['ident_icao'] = isset($data['ident_icao']) ? $data['ident_icao'] : null;
        $this->container['ident_iata'] = isset($data['ident_iata']) ? $data['ident_iata'] : null;
        $this->container['actual_ident'] = isset($data['actual_ident']) ? $data['actual_ident'] : null;
        $this->container['actual_ident_icao'] = isset($data['actual_ident_icao']) ? $data['actual_ident_icao'] : null;
        $this->container['actual_ident_iata'] = isset($data['actual_ident_iata']) ? $data['actual_ident_iata'] : null;
        $this->container['aircraft_type'] = isset($data['aircraft_type']) ? $data['aircraft_type'] : null;
        $this->container['scheduled_in'] = isset($data['scheduled_in']) ? $data['scheduled_in'] : null;
        $this->container['scheduled_out'] = isset($data['scheduled_out']) ? $data['scheduled_out'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['origin_icao'] = isset($data['origin_icao']) ? $data['origin_icao'] : null;
        $this->container['origin_iata'] = isset($data['origin_iata']) ? $data['origin_iata'] : null;
        $this->container['origin_lid'] = isset($data['origin_lid']) ? $data['origin_lid'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['destination_icao'] = isset($data['destination_icao']) ? $data['destination_icao'] : null;
        $this->container['destination_iata'] = isset($data['destination_iata']) ? $data['destination_iata'] : null;
        $this->container['destination_lid'] = isset($data['destination_lid']) ? $data['destination_lid'] : null;
        $this->container['fa_flight_id'] = isset($data['fa_flight_id']) ? $data['fa_flight_id'] : null;
        $this->container['meal_service'] = isset($data['meal_service']) ? $data['meal_service'] : null;
        $this->container['seats_cabin_business'] = isset($data['seats_cabin_business']) ? $data['seats_cabin_business'] : null;
        $this->container['seats_cabin_coach'] = isset($data['seats_cabin_coach']) ? $data['seats_cabin_coach'] : null;
        $this->container['seats_cabin_first'] = isset($data['seats_cabin_first']) ? $data['seats_cabin_first'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ident'] === null) {
            $invalidProperties[] = "'ident' can't be null";
        }
        if ($this->container['ident_icao'] === null) {
            $invalidProperties[] = "'ident_icao' can't be null";
        }
        if ($this->container['ident_iata'] === null) {
            $invalidProperties[] = "'ident_iata' can't be null";
        }
        if ($this->container['actual_ident'] === null) {
            $invalidProperties[] = "'actual_ident' can't be null";
        }
        if ($this->container['actual_ident_icao'] === null) {
            $invalidProperties[] = "'actual_ident_icao' can't be null";
        }
        if ($this->container['actual_ident_iata'] === null) {
            $invalidProperties[] = "'actual_ident_iata' can't be null";
        }
        if ($this->container['aircraft_type'] === null) {
            $invalidProperties[] = "'aircraft_type' can't be null";
        }
        if ($this->container['scheduled_in'] === null) {
            $invalidProperties[] = "'scheduled_in' can't be null";
        }
        if ($this->container['scheduled_out'] === null) {
            $invalidProperties[] = "'scheduled_out' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['origin_icao'] === null) {
            $invalidProperties[] = "'origin_icao' can't be null";
        }
        if ($this->container['origin_iata'] === null) {
            $invalidProperties[] = "'origin_iata' can't be null";
        }
        if ($this->container['origin_lid'] === null) {
            $invalidProperties[] = "'origin_lid' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['destination_icao'] === null) {
            $invalidProperties[] = "'destination_icao' can't be null";
        }
        if ($this->container['destination_iata'] === null) {
            $invalidProperties[] = "'destination_iata' can't be null";
        }
        if ($this->container['destination_lid'] === null) {
            $invalidProperties[] = "'destination_lid' can't be null";
        }
        if ($this->container['fa_flight_id'] === null) {
            $invalidProperties[] = "'fa_flight_id' can't be null";
        }
        if ($this->container['meal_service'] === null) {
            $invalidProperties[] = "'meal_service' can't be null";
        }
        if ($this->container['seats_cabin_business'] === null) {
            $invalidProperties[] = "'seats_cabin_business' can't be null";
        }
        if ($this->container['seats_cabin_coach'] === null) {
            $invalidProperties[] = "'seats_cabin_coach' can't be null";
        }
        if ($this->container['seats_cabin_first'] === null) {
            $invalidProperties[] = "'seats_cabin_first' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ident
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->container['ident'];
    }

    /**
     * Sets ident
     *
     * @param string $ident Flight ident
     *
     * @return $this
     */
    public function setIdent($ident)
    {
        $this->container['ident'] = $ident;

        return $this;
    }

    /**
     * Gets ident_icao
     *
     * @return string
     */
    public function getIdentIcao()
    {
        return $this->container['ident_icao'];
    }

    /**
     * Sets ident_icao
     *
     * @param string $ident_icao Flight ident in ICAO format
     *
     * @return $this
     */
    public function setIdentIcao($ident_icao)
    {
        $this->container['ident_icao'] = $ident_icao;

        return $this;
    }

    /**
     * Gets ident_iata
     *
     * @return string
     */
    public function getIdentIata()
    {
        return $this->container['ident_iata'];
    }

    /**
     * Sets ident_iata
     *
     * @param string $ident_iata Flight ident in IATA format
     *
     * @return $this
     */
    public function setIdentIata($ident_iata)
    {
        $this->container['ident_iata'] = $ident_iata;

        return $this;
    }

    /**
     * Gets actual_ident
     *
     * @return string
     */
    public function getActualIdent()
    {
        return $this->container['actual_ident'];
    }

    /**
     * Sets actual_ident
     *
     * @param string $actual_ident If ident is a codeshare flight, this is the primary identifier used by the operator
     *
     * @return $this
     */
    public function setActualIdent($actual_ident)
    {
        $this->container['actual_ident'] = $actual_ident;

        return $this;
    }

    /**
     * Gets actual_ident_icao
     *
     * @return string
     */
    public function getActualIdentIcao()
    {
        return $this->container['actual_ident_icao'];
    }

    /**
     * Sets actual_ident_icao
     *
     * @param string $actual_ident_icao If ident is a codeshare flight, this is the primary identifier used by the operator in ICAO format
     *
     * @return $this
     */
    public function setActualIdentIcao($actual_ident_icao)
    {
        $this->container['actual_ident_icao'] = $actual_ident_icao;

        return $this;
    }

    /**
     * Gets actual_ident_iata
     *
     * @return string
     */
    public function getActualIdentIata()
    {
        return $this->container['actual_ident_iata'];
    }

    /**
     * Sets actual_ident_iata
     *
     * @param string $actual_ident_iata If ident is a codeshare flight, this is the primary identifier used by the operator in IATA format
     *
     * @return $this
     */
    public function setActualIdentIata($actual_ident_iata)
    {
        $this->container['actual_ident_iata'] = $actual_ident_iata;

        return $this;
    }

    /**
     * Gets aircraft_type
     *
     * @return string
     */
    public function getAircraftType()
    {
        return $this->container['aircraft_type'];
    }

    /**
     * Sets aircraft_type
     *
     * @param string $aircraft_type Aircraft type will generally be ICAO code, but IATA code will be given when the ICAO code is not known
     *
     * @return $this
     */
    public function setAircraftType($aircraft_type)
    {
        $this->container['aircraft_type'] = $aircraft_type;

        return $this;
    }

    /**
     * Gets scheduled_in
     *
     * @return \DateTime
     */
    public function getScheduledIn()
    {
        return $this->container['scheduled_in'];
    }

    /**
     * Sets scheduled_in
     *
     * @param \DateTime $scheduled_in Scheduled time of arrival at gate
     *
     * @return $this
     */
    public function setScheduledIn($scheduled_in)
    {
        $this->container['scheduled_in'] = $scheduled_in;

        return $this;
    }

    /**
     * Gets scheduled_out
     *
     * @return \DateTime
     */
    public function getScheduledOut()
    {
        return $this->container['scheduled_out'];
    }

    /**
     * Sets scheduled_out
     *
     * @param \DateTime $scheduled_out Scheduled time of departure from gate
     *
     * @return $this
     */
    public function setScheduledOut($scheduled_out)
    {
        $this->container['scheduled_out'] = $scheduled_out;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin The origin airport's identifier code
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets origin_icao
     *
     * @return string
     */
    public function getOriginIcao()
    {
        return $this->container['origin_icao'];
    }

    /**
     * Sets origin_icao
     *
     * @param string $origin_icao The origin airport's ICAO code
     *
     * @return $this
     */
    public function setOriginIcao($origin_icao)
    {
        $this->container['origin_icao'] = $origin_icao;

        return $this;
    }

    /**
     * Gets origin_iata
     *
     * @return string
     */
    public function getOriginIata()
    {
        return $this->container['origin_iata'];
    }

    /**
     * Sets origin_iata
     *
     * @param string $origin_iata The origin airport's IATA code
     *
     * @return $this
     */
    public function setOriginIata($origin_iata)
    {
        $this->container['origin_iata'] = $origin_iata;

        return $this;
    }

    /**
     * Gets origin_lid
     *
     * @return string
     */
    public function getOriginLid()
    {
        return $this->container['origin_lid'];
    }

    /**
     * Sets origin_lid
     *
     * @param string $origin_lid The origin airport's LID
     *
     * @return $this
     */
    public function setOriginLid($origin_lid)
    {
        $this->container['origin_lid'] = $origin_lid;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination The destination airport's identifier code
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destination_icao
     *
     * @return string
     */
    public function getDestinationIcao()
    {
        return $this->container['destination_icao'];
    }

    /**
     * Sets destination_icao
     *
     * @param string $destination_icao The destination airport's ICAO code
     *
     * @return $this
     */
    public function setDestinationIcao($destination_icao)
    {
        $this->container['destination_icao'] = $destination_icao;

        return $this;
    }

    /**
     * Gets destination_iata
     *
     * @return string
     */
    public function getDestinationIata()
    {
        return $this->container['destination_iata'];
    }

    /**
     * Sets destination_iata
     *
     * @param string $destination_iata The destination airport's IATA code
     *
     * @return $this
     */
    public function setDestinationIata($destination_iata)
    {
        $this->container['destination_iata'] = $destination_iata;

        return $this;
    }

    /**
     * Gets destination_lid
     *
     * @return string
     */
    public function getDestinationLid()
    {
        return $this->container['destination_lid'];
    }

    /**
     * Sets destination_lid
     *
     * @param string $destination_lid The destination airport's LID
     *
     * @return $this
     */
    public function setDestinationLid($destination_lid)
    {
        $this->container['destination_lid'] = $destination_lid;

        return $this;
    }

    /**
     * Gets fa_flight_id
     *
     * @return string
     */
    public function getFaFlightId()
    {
        return $this->container['fa_flight_id'];
    }

    /**
     * Sets fa_flight_id
     *
     * @param string $fa_flight_id Unique FlightAware ID for flight. Will be null for flights scheduled more than a few days in the future.
     *
     * @return $this
     */
    public function setFaFlightId($fa_flight_id)
    {
        $this->container['fa_flight_id'] = $fa_flight_id;

        return $this;
    }

    /**
     * Gets meal_service
     *
     * @return string
     */
    public function getMealService()
    {
        return $this->container['meal_service'];
    }

    /**
     * Sets meal_service
     *
     * @param string $meal_service Meal service offered on the flight
     *
     * @return $this
     */
    public function setMealService($meal_service)
    {
        $this->container['meal_service'] = $meal_service;

        return $this;
    }

    /**
     * Gets seats_cabin_business
     *
     * @return int
     */
    public function getSeatsCabinBusiness()
    {
        return $this->container['seats_cabin_business'];
    }

    /**
     * Sets seats_cabin_business
     *
     * @param int $seats_cabin_business Number of seats in the business class cabin
     *
     * @return $this
     */
    public function setSeatsCabinBusiness($seats_cabin_business)
    {
        $this->container['seats_cabin_business'] = $seats_cabin_business;

        return $this;
    }

    /**
     * Gets seats_cabin_coach
     *
     * @return int
     */
    public function getSeatsCabinCoach()
    {
        return $this->container['seats_cabin_coach'];
    }

    /**
     * Sets seats_cabin_coach
     *
     * @param int $seats_cabin_coach Number of seats in the coach class cabin
     *
     * @return $this
     */
    public function setSeatsCabinCoach($seats_cabin_coach)
    {
        $this->container['seats_cabin_coach'] = $seats_cabin_coach;

        return $this;
    }

    /**
     * Gets seats_cabin_first
     *
     * @return int
     */
    public function getSeatsCabinFirst()
    {
        return $this->container['seats_cabin_first'];
    }

    /**
     * Sets seats_cabin_first
     *
     * @param int $seats_cabin_first Number of seats in the first class cabin
     *
     * @return $this
     */
    public function setSeatsCabinFirst($seats_cabin_first)
    {
        $this->container['seats_cabin_first'] = $seats_cabin_first;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
