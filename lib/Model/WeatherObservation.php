<?php
/**
 * WeatherObservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresightâ„¢, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresightâ„¢ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FlightAware\PHPClient\Model;

use \ArrayAccess;
use \FlightAware\PHPClient\ObjectSerializer;

/**
 * WeatherObservation Class Doc Comment
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WeatherObservation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WeatherObservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'airport_code' => 'string',
'cloud_friendly' => 'string',
'clouds' => '\FlightAware\PHPClient\Model\InlineResponse20024Clouds[]',
'conditions' => 'string',
'pressure' => 'float',
'pressure_units' => 'string',
'raw_data' => 'string',
'temp_air' => 'int',
'temp_dewpoint' => 'int',
'temp_perceived' => 'int',
'relative_humidity' => 'int',
'time' => '\DateTime',
'visibility' => 'float',
'visibility_units' => 'string',
'wind_direction' => 'int',
'wind_friendly' => 'string',
'wind_speed' => 'int',
'wind_speed_gust' => 'int',
'wind_units' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'airport_code' => null,
'cloud_friendly' => null,
'clouds' => null,
'conditions' => null,
'pressure' => null,
'pressure_units' => null,
'raw_data' => null,
'temp_air' => null,
'temp_dewpoint' => null,
'temp_perceived' => null,
'relative_humidity' => null,
'time' => 'date-time',
'visibility' => null,
'visibility_units' => null,
'wind_direction' => null,
'wind_friendly' => null,
'wind_speed' => null,
'wind_speed_gust' => null,
'wind_units' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airport_code' => 'airport_code',
'cloud_friendly' => 'cloud_friendly',
'clouds' => 'clouds',
'conditions' => 'conditions',
'pressure' => 'pressure',
'pressure_units' => 'pressure_units',
'raw_data' => 'raw_data',
'temp_air' => 'temp_air',
'temp_dewpoint' => 'temp_dewpoint',
'temp_perceived' => 'temp_perceived',
'relative_humidity' => 'relative_humidity',
'time' => 'time',
'visibility' => 'visibility',
'visibility_units' => 'visibility_units',
'wind_direction' => 'wind_direction',
'wind_friendly' => 'wind_friendly',
'wind_speed' => 'wind_speed',
'wind_speed_gust' => 'wind_speed_gust',
'wind_units' => 'wind_units'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airport_code' => 'setAirportCode',
'cloud_friendly' => 'setCloudFriendly',
'clouds' => 'setClouds',
'conditions' => 'setConditions',
'pressure' => 'setPressure',
'pressure_units' => 'setPressureUnits',
'raw_data' => 'setRawData',
'temp_air' => 'setTempAir',
'temp_dewpoint' => 'setTempDewpoint',
'temp_perceived' => 'setTempPerceived',
'relative_humidity' => 'setRelativeHumidity',
'time' => 'setTime',
'visibility' => 'setVisibility',
'visibility_units' => 'setVisibilityUnits',
'wind_direction' => 'setWindDirection',
'wind_friendly' => 'setWindFriendly',
'wind_speed' => 'setWindSpeed',
'wind_speed_gust' => 'setWindSpeedGust',
'wind_units' => 'setWindUnits'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airport_code' => 'getAirportCode',
'cloud_friendly' => 'getCloudFriendly',
'clouds' => 'getClouds',
'conditions' => 'getConditions',
'pressure' => 'getPressure',
'pressure_units' => 'getPressureUnits',
'raw_data' => 'getRawData',
'temp_air' => 'getTempAir',
'temp_dewpoint' => 'getTempDewpoint',
'temp_perceived' => 'getTempPerceived',
'relative_humidity' => 'getRelativeHumidity',
'time' => 'getTime',
'visibility' => 'getVisibility',
'visibility_units' => 'getVisibilityUnits',
'wind_direction' => 'getWindDirection',
'wind_friendly' => 'getWindFriendly',
'wind_speed' => 'getWindSpeed',
'wind_speed_gust' => 'getWindSpeedGust',
'wind_units' => 'getWindUnits'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRESSURE_UNITS_NULL = 'null';
const PRESSURE_UNITS_MB = 'mb';
const PRESSURE_UNITS_IN_HG = 'in Hg';
const VISIBILITY_UNITS_NULL = 'null';
const VISIBILITY_UNITS_METERS = 'meters';
const VISIBILITY_UNITS_SM = 'SM';
const WIND_UNITS_MPS = 'MPS';
const WIND_UNITS_KT = 'KT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPressureUnitsAllowableValues()
    {
        return [
            self::PRESSURE_UNITS_NULL,
self::PRESSURE_UNITS_MB,
self::PRESSURE_UNITS_IN_HG,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibilityUnitsAllowableValues()
    {
        return [
            self::VISIBILITY_UNITS_NULL,
self::VISIBILITY_UNITS_METERS,
self::VISIBILITY_UNITS_SM,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWindUnitsAllowableValues()
    {
        return [
            self::WIND_UNITS_MPS,
self::WIND_UNITS_KT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['airport_code'] = isset($data['airport_code']) ? $data['airport_code'] : null;
        $this->container['cloud_friendly'] = isset($data['cloud_friendly']) ? $data['cloud_friendly'] : null;
        $this->container['clouds'] = isset($data['clouds']) ? $data['clouds'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['pressure'] = isset($data['pressure']) ? $data['pressure'] : null;
        $this->container['pressure_units'] = isset($data['pressure_units']) ? $data['pressure_units'] : null;
        $this->container['raw_data'] = isset($data['raw_data']) ? $data['raw_data'] : null;
        $this->container['temp_air'] = isset($data['temp_air']) ? $data['temp_air'] : null;
        $this->container['temp_dewpoint'] = isset($data['temp_dewpoint']) ? $data['temp_dewpoint'] : null;
        $this->container['temp_perceived'] = isset($data['temp_perceived']) ? $data['temp_perceived'] : null;
        $this->container['relative_humidity'] = isset($data['relative_humidity']) ? $data['relative_humidity'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['visibility_units'] = isset($data['visibility_units']) ? $data['visibility_units'] : null;
        $this->container['wind_direction'] = isset($data['wind_direction']) ? $data['wind_direction'] : null;
        $this->container['wind_friendly'] = isset($data['wind_friendly']) ? $data['wind_friendly'] : null;
        $this->container['wind_speed'] = isset($data['wind_speed']) ? $data['wind_speed'] : null;
        $this->container['wind_speed_gust'] = isset($data['wind_speed_gust']) ? $data['wind_speed_gust'] : null;
        $this->container['wind_units'] = isset($data['wind_units']) ? $data['wind_units'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['airport_code'] === null) {
            $invalidProperties[] = "'airport_code' can't be null";
        }
        if ($this->container['cloud_friendly'] === null) {
            $invalidProperties[] = "'cloud_friendly' can't be null";
        }
        if ($this->container['clouds'] === null) {
            $invalidProperties[] = "'clouds' can't be null";
        }
        if ($this->container['conditions'] === null) {
            $invalidProperties[] = "'conditions' can't be null";
        }
        if ($this->container['pressure'] === null) {
            $invalidProperties[] = "'pressure' can't be null";
        }
        if ($this->container['pressure_units'] === null) {
            $invalidProperties[] = "'pressure_units' can't be null";
        }
        $allowedValues = $this->getPressureUnitsAllowableValues();
        if (!is_null($this->container['pressure_units']) && !in_array($this->container['pressure_units'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pressure_units', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['raw_data'] === null) {
            $invalidProperties[] = "'raw_data' can't be null";
        }
        if ($this->container['temp_air'] === null) {
            $invalidProperties[] = "'temp_air' can't be null";
        }
        if ($this->container['temp_dewpoint'] === null) {
            $invalidProperties[] = "'temp_dewpoint' can't be null";
        }
        if ($this->container['temp_perceived'] === null) {
            $invalidProperties[] = "'temp_perceived' can't be null";
        }
        if ($this->container['relative_humidity'] === null) {
            $invalidProperties[] = "'relative_humidity' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['visibility'] === null) {
            $invalidProperties[] = "'visibility' can't be null";
        }
        if ($this->container['visibility_units'] === null) {
            $invalidProperties[] = "'visibility_units' can't be null";
        }
        $allowedValues = $this->getVisibilityUnitsAllowableValues();
        if (!is_null($this->container['visibility_units']) && !in_array($this->container['visibility_units'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'visibility_units', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['wind_direction'] === null) {
            $invalidProperties[] = "'wind_direction' can't be null";
        }
        if ($this->container['wind_friendly'] === null) {
            $invalidProperties[] = "'wind_friendly' can't be null";
        }
        if ($this->container['wind_speed'] === null) {
            $invalidProperties[] = "'wind_speed' can't be null";
        }
        if ($this->container['wind_speed_gust'] === null) {
            $invalidProperties[] = "'wind_speed_gust' can't be null";
        }
        if ($this->container['wind_units'] === null) {
            $invalidProperties[] = "'wind_units' can't be null";
        }
        $allowedValues = $this->getWindUnitsAllowableValues();
        if (!is_null($this->container['wind_units']) && !in_array($this->container['wind_units'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'wind_units', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airport_code
     *
     * @return string
     */
    public function getAirportCode()
    {
        return $this->container['airport_code'];
    }

    /**
     * Sets airport_code
     *
     * @param string $airport_code The airport code of the report. LID/IATA will be used if airport lacks an ICAO code.
     *
     * @return $this
     */
    public function setAirportCode($airport_code)
    {
        $this->container['airport_code'] = $airport_code;

        return $this;
    }

    /**
     * Gets cloud_friendly
     *
     * @return string
     */
    public function getCloudFriendly()
    {
        return $this->container['cloud_friendly'];
    }

    /**
     * Sets cloud_friendly
     *
     * @param string $cloud_friendly Human-friendly summary of clouds.
     *
     * @return $this
     */
    public function setCloudFriendly($cloud_friendly)
    {
        $this->container['cloud_friendly'] = $cloud_friendly;

        return $this;
    }

    /**
     * Gets clouds
     *
     * @return \FlightAware\PHPClient\Model\InlineResponse20024Clouds[]
     */
    public function getClouds()
    {
        return $this->container['clouds'];
    }

    /**
     * Sets clouds
     *
     * @param \FlightAware\PHPClient\Model\InlineResponse20024Clouds[] $clouds Array of cloud data
     *
     * @return $this
     */
    public function setClouds($clouds)
    {
        $this->container['clouds'] = $clouds;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string $conditions Notable weather
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets pressure
     *
     * @return float
     */
    public function getPressure()
    {
        return $this->container['pressure'];
    }

    /**
     * Sets pressure
     *
     * @param float $pressure Air pressure (see pressure_units field for units)
     *
     * @return $this
     */
    public function setPressure($pressure)
    {
        $this->container['pressure'] = $pressure;

        return $this;
    }

    /**
     * Gets pressure_units
     *
     * @return string
     */
    public function getPressureUnits()
    {
        return $this->container['pressure_units'];
    }

    /**
     * Sets pressure_units
     *
     * @param string $pressure_units Units for air pressure
     *
     * @return $this
     */
    public function setPressureUnits($pressure_units)
    {
        $allowedValues = $this->getPressureUnitsAllowableValues();
        if (!in_array($pressure_units, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pressure_units', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pressure_units'] = $pressure_units;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return string
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param string $raw_data Raw METAR report string
     *
     * @return $this
     */
    public function setRawData($raw_data)
    {
        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets temp_air
     *
     * @return int
     */
    public function getTempAir()
    {
        return $this->container['temp_air'];
    }

    /**
     * Sets temp_air
     *
     * @param int $temp_air Air temperature
     *
     * @return $this
     */
    public function setTempAir($temp_air)
    {
        $this->container['temp_air'] = $temp_air;

        return $this;
    }

    /**
     * Gets temp_dewpoint
     *
     * @return int
     */
    public function getTempDewpoint()
    {
        return $this->container['temp_dewpoint'];
    }

    /**
     * Sets temp_dewpoint
     *
     * @param int $temp_dewpoint Dewpoint temperature
     *
     * @return $this
     */
    public function setTempDewpoint($temp_dewpoint)
    {
        $this->container['temp_dewpoint'] = $temp_dewpoint;

        return $this;
    }

    /**
     * Gets temp_perceived
     *
     * @return int
     */
    public function getTempPerceived()
    {
        return $this->container['temp_perceived'];
    }

    /**
     * Sets temp_perceived
     *
     * @param int $temp_perceived Perceived temperature (e.g. wind chill)
     *
     * @return $this
     */
    public function setTempPerceived($temp_perceived)
    {
        $this->container['temp_perceived'] = $temp_perceived;

        return $this;
    }

    /**
     * Gets relative_humidity
     *
     * @return int
     */
    public function getRelativeHumidity()
    {
        return $this->container['relative_humidity'];
    }

    /**
     * Sets relative_humidity
     *
     * @param int $relative_humidity Relative humidity (percent)
     *
     * @return $this
     */
    public function setRelativeHumidity($relative_humidity)
    {
        $this->container['relative_humidity'] = $relative_humidity;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime $time Timestamp when report was collected
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return float
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param float $visibility Horizontal visibility distance (see visibility_units for units)
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets visibility_units
     *
     * @return string
     */
    public function getVisibilityUnits()
    {
        return $this->container['visibility_units'];
    }

    /**
     * Sets visibility_units
     *
     * @param string $visibility_units Units for visibility
     *
     * @return $this
     */
    public function setVisibilityUnits($visibility_units)
    {
        $allowedValues = $this->getVisibilityUnitsAllowableValues();
        if (!in_array($visibility_units, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visibility_units', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility_units'] = $visibility_units;

        return $this;
    }

    /**
     * Gets wind_direction
     *
     * @return int
     */
    public function getWindDirection()
    {
        return $this->container['wind_direction'];
    }

    /**
     * Sets wind_direction
     *
     * @param int $wind_direction Heading direction of wind (degrees)
     *
     * @return $this
     */
    public function setWindDirection($wind_direction)
    {
        $this->container['wind_direction'] = $wind_direction;

        return $this;
    }

    /**
     * Gets wind_friendly
     *
     * @return string
     */
    public function getWindFriendly()
    {
        return $this->container['wind_friendly'];
    }

    /**
     * Sets wind_friendly
     *
     * @param string $wind_friendly Human-friendly summary of winds
     *
     * @return $this
     */
    public function setWindFriendly($wind_friendly)
    {
        $this->container['wind_friendly'] = $wind_friendly;

        return $this;
    }

    /**
     * Gets wind_speed
     *
     * @return int
     */
    public function getWindSpeed()
    {
        return $this->container['wind_speed'];
    }

    /**
     * Sets wind_speed
     *
     * @param int $wind_speed Wind speed
     *
     * @return $this
     */
    public function setWindSpeed($wind_speed)
    {
        $this->container['wind_speed'] = $wind_speed;

        return $this;
    }

    /**
     * Gets wind_speed_gust
     *
     * @return int
     */
    public function getWindSpeedGust()
    {
        return $this->container['wind_speed_gust'];
    }

    /**
     * Sets wind_speed_gust
     *
     * @param int $wind_speed_gust Wind gust speed
     *
     * @return $this
     */
    public function setWindSpeedGust($wind_speed_gust)
    {
        $this->container['wind_speed_gust'] = $wind_speed_gust;

        return $this;
    }

    /**
     * Gets wind_units
     *
     * @return string
     */
    public function getWindUnits()
    {
        return $this->container['wind_units'];
    }

    /**
     * Sets wind_units
     *
     * @param string $wind_units Units for the wind speed and wind gusts
     *
     * @return $this
     */
    public function setWindUnits($wind_units)
    {
        $allowedValues = $this->getWindUnitsAllowableValues();
        if (!in_array($wind_units, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'wind_units', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wind_units'] = $wind_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
