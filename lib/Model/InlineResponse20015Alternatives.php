<?php
/**
 * InlineResponse20015Alternatives
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresight™, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresight™ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FlightAware\PHPClient\Model;

use \ArrayAccess;
use \FlightAware\PHPClient\ObjectSerializer;

/**
 * InlineResponse20015Alternatives Class Doc Comment
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20015Alternatives implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_15_alternatives';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'airport_code' => 'string',
'code_icao' => 'string',
'code_iata' => 'string',
'code_lid' => 'string',
'alternate_ident' => 'string',
'name' => 'string',
'type' => 'string',
'elevation' => 'float',
'city' => 'string',
'state' => 'string',
'longitude' => 'float',
'latitude' => 'float',
'timezone' => 'string',
'country_code' => 'string',
'wiki_url' => 'string',
'airport_flights_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'airport_code' => null,
'code_icao' => null,
'code_iata' => null,
'code_lid' => null,
'alternate_ident' => null,
'name' => null,
'type' => null,
'elevation' => null,
'city' => null,
'state' => null,
'longitude' => null,
'latitude' => null,
'timezone' => null,
'country_code' => null,
'wiki_url' => 'uri',
'airport_flights_url' => 'uri-reference'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'airport_code' => 'airport_code',
'code_icao' => 'code_icao',
'code_iata' => 'code_iata',
'code_lid' => 'code_lid',
'alternate_ident' => 'alternate_ident',
'name' => 'name',
'type' => 'type',
'elevation' => 'elevation',
'city' => 'city',
'state' => 'state',
'longitude' => 'longitude',
'latitude' => 'latitude',
'timezone' => 'timezone',
'country_code' => 'country_code',
'wiki_url' => 'wiki_url',
'airport_flights_url' => 'airport_flights_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'airport_code' => 'setAirportCode',
'code_icao' => 'setCodeIcao',
'code_iata' => 'setCodeIata',
'code_lid' => 'setCodeLid',
'alternate_ident' => 'setAlternateIdent',
'name' => 'setName',
'type' => 'setType',
'elevation' => 'setElevation',
'city' => 'setCity',
'state' => 'setState',
'longitude' => 'setLongitude',
'latitude' => 'setLatitude',
'timezone' => 'setTimezone',
'country_code' => 'setCountryCode',
'wiki_url' => 'setWikiUrl',
'airport_flights_url' => 'setAirportFlightsUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'airport_code' => 'getAirportCode',
'code_icao' => 'getCodeIcao',
'code_iata' => 'getCodeIata',
'code_lid' => 'getCodeLid',
'alternate_ident' => 'getAlternateIdent',
'name' => 'getName',
'type' => 'getType',
'elevation' => 'getElevation',
'city' => 'getCity',
'state' => 'getState',
'longitude' => 'getLongitude',
'latitude' => 'getLatitude',
'timezone' => 'getTimezone',
'country_code' => 'getCountryCode',
'wiki_url' => 'getWikiUrl',
'airport_flights_url' => 'getAirportFlightsUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_AIRPORT = 'Airport';
const TYPE_HELIPORT = 'Heliport';
const TYPE_SEAPLANE_BASE = 'Seaplane Base';
const TYPE_ULTRALIGHT = 'Ultralight';
const TYPE_STOLPORT = 'Stolport';
const TYPE_GLIDERPORT = 'Gliderport';
const TYPE_BALLOONPORT = 'Balloonport';
const TYPE_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AIRPORT,
self::TYPE_HELIPORT,
self::TYPE_SEAPLANE_BASE,
self::TYPE_ULTRALIGHT,
self::TYPE_STOLPORT,
self::TYPE_GLIDERPORT,
self::TYPE_BALLOONPORT,
self::TYPE_NULL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['airport_code'] = isset($data['airport_code']) ? $data['airport_code'] : null;
        $this->container['code_icao'] = isset($data['code_icao']) ? $data['code_icao'] : null;
        $this->container['code_iata'] = isset($data['code_iata']) ? $data['code_iata'] : null;
        $this->container['code_lid'] = isset($data['code_lid']) ? $data['code_lid'] : null;
        $this->container['alternate_ident'] = isset($data['alternate_ident']) ? $data['alternate_ident'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['elevation'] = isset($data['elevation']) ? $data['elevation'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['wiki_url'] = isset($data['wiki_url']) ? $data['wiki_url'] : null;
        $this->container['airport_flights_url'] = isset($data['airport_flights_url']) ? $data['airport_flights_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['airport_code'] === null) {
            $invalidProperties[] = "'airport_code' can't be null";
        }
        if ($this->container['alternate_ident'] === null) {
            $invalidProperties[] = "'alternate_ident' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['elevation'] === null) {
            $invalidProperties[] = "'elevation' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['wiki_url'] === null) {
            $invalidProperties[] = "'wiki_url' can't be null";
        }
        if ($this->container['airport_flights_url'] === null) {
            $invalidProperties[] = "'airport_flights_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets airport_code
     *
     * @return string
     */
    public function getAirportCode()
    {
        return $this->container['airport_code'];
    }

    /**
     * Sets airport_code
     *
     * @param string $airport_code Default airport identifier, generally ICAO but may be IATA or LID if the airport lacks an ICAO code
     *
     * @return $this
     */
    public function setAirportCode($airport_code)
    {
        $this->container['airport_code'] = $airport_code;

        return $this;
    }

    /**
     * Gets code_icao
     *
     * @return string
     */
    public function getCodeIcao()
    {
        return $this->container['code_icao'];
    }

    /**
     * Sets code_icao
     *
     * @param string $code_icao ICAO identifier for the airport if known
     *
     * @return $this
     */
    public function setCodeIcao($code_icao)
    {
        $this->container['code_icao'] = $code_icao;

        return $this;
    }

    /**
     * Gets code_iata
     *
     * @return string
     */
    public function getCodeIata()
    {
        return $this->container['code_iata'];
    }

    /**
     * Sets code_iata
     *
     * @param string $code_iata IATA identifier for the airport if known
     *
     * @return $this
     */
    public function setCodeIata($code_iata)
    {
        $this->container['code_iata'] = $code_iata;

        return $this;
    }

    /**
     * Gets code_lid
     *
     * @return string
     */
    public function getCodeLid()
    {
        return $this->container['code_lid'];
    }

    /**
     * Sets code_lid
     *
     * @param string $code_lid LID identifier for the airport if known
     *
     * @return $this
     */
    public function setCodeLid($code_lid)
    {
        $this->container['code_lid'] = $code_lid;

        return $this;
    }

    /**
     * Gets alternate_ident
     *
     * @return string
     */
    public function getAlternateIdent()
    {
        return $this->container['alternate_ident'];
    }

    /**
     * Sets alternate_ident
     *
     * @param string $alternate_ident IATA or LID identifier for the airport. (Deprecated, use code_iata for the IATA identifier or code_lid for the LID identifier instead.)
     *
     * @return $this
     */
    public function setAlternateIdent($alternate_ident)
    {
        $this->container['alternate_ident'] = $alternate_ident;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Common name for the airport
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of airport
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets elevation
     *
     * @return float
     */
    public function getElevation()
    {
        return $this->container['elevation'];
    }

    /**
     * Sets elevation
     *
     * @param float $elevation Height above Mean Sea Level (MSL)
     *
     * @return $this
     */
    public function setElevation($elevation)
    {
        $this->container['elevation'] = $elevation;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Closest city to the airport
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State/province where the airport resides if applicable. For US states this will be their 2-letter code; for provinces or other entities, it will be the full name.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude Airport's longitude, generally the center point of the airport
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude Airport's latitude, generally the center point of the airport
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Applicable timezone for the airport, in the TZ database format
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code 2-letter code of country where the airport resides (ISO 3166-1 alpha-2)
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets wiki_url
     *
     * @return string
     */
    public function getWikiUrl()
    {
        return $this->container['wiki_url'];
    }

    /**
     * Sets wiki_url
     *
     * @param string $wiki_url Link to the wikipedia page for the airport
     *
     * @return $this
     */
    public function setWikiUrl($wiki_url)
    {
        $this->container['wiki_url'] = $wiki_url;

        return $this;
    }

    /**
     * Gets airport_flights_url
     *
     * @return string
     */
    public function getAirportFlightsUrl()
    {
        return $this->container['airport_flights_url'];
    }

    /**
     * Sets airport_flights_url
     *
     * @param string $airport_flights_url The URL to flights for this airport
     *
     * @return $this
     */
    public function setAirportFlightsUrl($airport_flights_url)
    {
        $this->container['airport_flights_url'] = $airport_flights_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
