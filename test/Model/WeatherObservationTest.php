<?php
/**
 * WeatherObservationTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FlightAware\PHPClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AeroAPI
 *
 * # Introduction AeroAPI is a simple, query-based API that gives software developers access to a variety of FlightAware's flight data. Users can obtain current or historical data. AeroAPI is a RESTful API delivering accurate and actionable aviation data. With the introduction of Foresight™, customers have access to the data that powers over half of the predictive airline ETAs in the US.  ## Categories AeroAPI is divided into several categories to make things easier to discover. - Flights: Summary information, planned routes, positions and more - Foresight: Flight positions enhanced with FlightAware Foresight™ - Airports: Airport information and FIDS style resources - Operators: Operator information and fleet activity resources - Alerts: Configure flight alerts and delivery destinations - History: Historical flight access for various endpoints - Miscellaneous: Flight disruption, future schedule information, and aircraft owner information  ## Development Tools AeroAPI is defined using the OpenAPI Spec 3.0, which means it can be easily imported into tools like Postman. To get started try importing the API specification using [Postman's instructions](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/). Once imported as a collection only the \"Value\" field under the collection's Authorization tab needs to be populated and saved before making calls.  The AeroAPI OpenAPI specification is located at:\\ https://flightaware.com/commercial/aeroapi/resources/aeroapi-openapi.yml  Our [open source AeroApps project](/aeroapi/portal/resources) provides a small collection of services and sample applications to help you get started.  The Flight Information Display System (FIDS) AeroApp is an example of a multi-tier application using multiple languages and Docker containers. It demonstrates connectivity, data caching, flight presentation, and leveraging flight maps.  The Alerts AeroApp demonstrates the use of AeroAPI to set, edit, and receive alerts in a sample application with a Dockerized Python backend and a React frontend.  Our AeroAPI push notification [testing interface](/commercial/aeroapi/send.rvt) provides a quick and easy way to test the delivery of customized alerts via AeroAPI push.
 *
 * OpenAPI spec version: 4.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace FlightAware\PHPClient;

use PHPUnit\Framework\TestCase;

/**
 * WeatherObservationTest Class Doc Comment
 *
 * @category    Class
 * @description WeatherObservation
 * @package     FlightAware\PHPClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WeatherObservationTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "WeatherObservation"
     */
    public function testWeatherObservation()
    {
    }

    /**
     * Test attribute "airport_code"
     */
    public function testPropertyAirportCode()
    {
    }

    /**
     * Test attribute "cloud_friendly"
     */
    public function testPropertyCloudFriendly()
    {
    }

    /**
     * Test attribute "clouds"
     */
    public function testPropertyClouds()
    {
    }

    /**
     * Test attribute "conditions"
     */
    public function testPropertyConditions()
    {
    }

    /**
     * Test attribute "pressure"
     */
    public function testPropertyPressure()
    {
    }

    /**
     * Test attribute "pressure_units"
     */
    public function testPropertyPressureUnits()
    {
    }

    /**
     * Test attribute "raw_data"
     */
    public function testPropertyRawData()
    {
    }

    /**
     * Test attribute "temp_air"
     */
    public function testPropertyTempAir()
    {
    }

    /**
     * Test attribute "temp_dewpoint"
     */
    public function testPropertyTempDewpoint()
    {
    }

    /**
     * Test attribute "temp_perceived"
     */
    public function testPropertyTempPerceived()
    {
    }

    /**
     * Test attribute "relative_humidity"
     */
    public function testPropertyRelativeHumidity()
    {
    }

    /**
     * Test attribute "time"
     */
    public function testPropertyTime()
    {
    }

    /**
     * Test attribute "visibility"
     */
    public function testPropertyVisibility()
    {
    }

    /**
     * Test attribute "visibility_units"
     */
    public function testPropertyVisibilityUnits()
    {
    }

    /**
     * Test attribute "wind_direction"
     */
    public function testPropertyWindDirection()
    {
    }

    /**
     * Test attribute "wind_friendly"
     */
    public function testPropertyWindFriendly()
    {
    }

    /**
     * Test attribute "wind_speed"
     */
    public function testPropertyWindSpeed()
    {
    }

    /**
     * Test attribute "wind_speed_gust"
     */
    public function testPropertyWindSpeedGust()
    {
    }

    /**
     * Test attribute "wind_units"
     */
    public function testPropertyWindUnits()
    {
    }
}
